/**
 * Communication protocol between Event Managers. Subscription definitions.
 * @author Krzysztof Trzepla
 * @copyright (C) 2015 ACK CYFRONET AGH
 * @copyright This software is released under the MIT license cited in
 * 'LICENSE.txt'
 */

syntax = "proto2";
package one.clproto;

// Generic subscription message
message Subscription {
    required sint64 id = 1; // unique subscription ID
    oneof type { // list of all subscription types
        FileReadSubscription             file_read             = 2;
        FileWrittenSubscription          file_written          = 3;
        FileAttrChangedSubscription      file_attr_changed     = 4;
        FileLocationChangedSubscription  file_location_changed = 5;
        FilePermChangedSubscription      file_perm_changed     = 6;
        FileRemovedSubscription          file_removed          = 7;
        FileRenamedSubscription          file_renamed          = 8;
        QuotaExceededSubscription        quota_exceeded        = 9;
        HelperParamsChangedSubscription  helper_params_changed = 10;
        ConfigurationChangedSubscription configuration_changed = 11;
    }
}

message FileReadSubscription {
    optional uint32 counter_threshold = 1; // maximal amount of aggregated
                                           // events before emission
    optional uint32 time_threshold    = 2; // maximal delay in milliseconds
                                           // between successive events emission
}

message FileWrittenSubscription {
    optional uint32 counter_threshold = 1; // maximal amount of aggregated
                                           // events before emission
    optional uint32 time_threshold    = 2; // maximal delay in milliseconds
                                           // between successive events emission
}

message FileAttrChangedSubscription {
    required bytes  file_uuid         = 1; // file UUID
    optional uint32 time_threshold    = 2; // maximal delay in milliseconds
                                           // between successive events emission
}

message FileLocationChangedSubscription {
    required bytes  file_uuid         = 1; // file UUID
    optional uint32 time_threshold    = 2; // maximal delay in milliseconds
                                           // between successive events emission
}

message FilePermChangedSubscription {
    required bytes  file_uuid         = 1; // file UUID
}

message FileRemovedSubscription {
    required bytes  file_uuid         = 1; // file UUID
}

message FileRenamedSubscription {
    required bytes  file_uuid         = 1; // file UUID
}

message QuotaExceededSubscription {
}

message SubscriptionCancellation {
    required sint64 id = 1; // ID of subscription to be cancelled
}

message HelperParamsChangedSubscription {
    required bytes storage_id = 1; // ID of storage handled by helper
}

message ConfigurationChangedSubscription {
}