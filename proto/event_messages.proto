/**
 * Communication protocol between Event Managers.
 * @author Krzysztof Trzepla
 * @copyright (C) 2015 ACK CYFRONET AGH
 * @copyright This software is released under the MIT license cited in
 * 'LICENSE.txt'
 */

syntax = "proto2";
package one.clproto;

import "common_messages.proto";
import "fuse_messages.proto";
import "diagnostic_messages.proto";

message Events {
    repeated Event events = 1;
}

message FlushEvents {
    required bytes  provider_id          = 1;
    required bytes  context              = 2;
    required sint64 subscription_id      = 3;
}

// Generic event message
message Event {
    oneof type { // list of all event types
        FileReadEvent             file_read             = 1;
        FileWrittenEvent          file_written          = 2;
        FileAttrChangedEvent      file_attr_changed     = 3;
        FileLocationChangedEvent  file_location_changed = 4;
        FilePermChangedEvent      file_perm_changed     = 5;
        FileRemovedEvent          file_removed          = 6;
        FileRenamedEvent          file_renamed          = 7;
        QuotaExceededEvent        quota_exceeded        = 8;
        HelperParamsChangedEvent  helper_params_changed = 9;
        ConfigurationChangedEvent configuration_changed = 10;
    }
}

message FileReadEvent {
    required uint32    counter   = 1; // amount of aggregated events
    required bytes     file_uuid = 2; // UUID of file associated with an event
    required uint64    size      = 3; // amount of read bytes
    repeated FileBlock blocks    = 4; // list of read blocks
}

message FileWrittenEvent {
    required uint32    counter   = 1; // amount of aggregated events
    required bytes     file_uuid = 2; // UUID of file associated with an event
    optional uint64    file_size = 3; // size of file associated with an event
    required uint64    size      = 4; // amount of written bytes
    repeated FileBlock blocks    = 5; // list of written blocks
}

message FileAttrChangedEvent {
    required FileAttr file_attr = 1;
}

message FileLocationChangedEvent {
    required FileLocation file_location = 1;
    optional uint64 change_beg_offset = 2;
    optional uint64 change_end_offset = 3;
}

message FilePermChangedEvent {
    required bytes file_uuid = 1; // UUID of file associated with an event
}

message FileRemovedEvent {
    required bytes file_uuid = 1; // UUID of file associated with an event
}

message FileRenamedEvent {
    required FileRenamedEntry top_entry = 1;     // entry for renamed file
    repeated FileRenamedEntry child_entries = 2; // entries for children of
                                                 // renamed file
}

message QuotaExceededEvent {
    repeated bytes spaces = 1; // Blocked spaces
}

message HelperParamsChangedEvent {
    required bytes storage_id = 1;
}

message ConfigurationChangedEvent {
    required Configuration configuration = 1;
}